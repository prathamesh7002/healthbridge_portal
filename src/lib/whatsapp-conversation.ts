import { whatsappService } from './whatsapp';

export interface ConversationState {
  phoneNumber: string;
  step: 'greeting' | 'doctor_selection' | 'slot_selection' | 'confirmation' | 'completed';
  language: 'hi' | 'mr' | 'en';
  selectedDoctor?: string;
  selectedSlot?: string;
  patientName?: string;
}

export interface Doctor {
  id: string;
  name: string;
  specialty: string;
  clinic: string;
  address: string;
}

export interface TimeSlot {
  id: string;
  time: string;
  available: boolean;
}

// In-memory conversation state (in production, use Redis or database)
const conversationStates = new Map<string, ConversationState>();

// Sample doctors data (integrate with your existing data)
const doctors: Doctor[] = [
  {
    id: 'dr_verma',
    name: '‡§°‡•â. ‡§µ‡§∞‡•ç‡§Æ‡§æ / Dr. Verma',
    specialty: '‡§ú‡§®‡§∞‡§≤ ‡§´‡§ø‡§ú‡§ø‡§∂‡§ø‡§Ø‡§® / General Physician',
    clinic: '‡§∂‡§æ‡§Ç‡§§‡§ø ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï / Shanti Clinic',
    address: '‡§∏‡§ø‡§µ‡§ø‡§≤ ‡§≤‡§æ‡§á‡§®‡•ç‡§∏, ‡§®‡§æ‡§ó‡§™‡•Å‡§∞ / Civil Lines, Nagpur'
  },
  {
    id: 'dr_mehta',
    name: '‡§°‡•â. ‡§Æ‡•á‡§π‡§§‡§æ / Dr. Mehta',
    specialty: '‡§π‡•É‡§¶‡§Ø ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û / Cardiologist',
    clinic: '‡§π‡§æ‡§∞‡•ç‡§ü ‡§ï‡•á‡§Ø‡§∞ ‡§∏‡•á‡§Ç‡§ü‡§∞ / Heart Care Center',
    address: '‡§∏‡§¶‡§∞, ‡§®‡§æ‡§ó‡§™‡•Å‡§∞ / Sadar, Nagpur'
  },
  {
    id: 'dr_sharma',
    name: '‡§°‡•â. ‡§∂‡§∞‡•ç‡§Æ‡§æ / Dr. Sharma',
    specialty: '‡§¨‡§æ‡§≤ ‡§∞‡•ã‡§ó ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û / Pediatrician',
    clinic: '‡§ö‡§æ‡§á‡§≤‡•ç‡§° ‡§ï‡•á‡§Ø‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï / Child Care Clinic',
    address: '‡§ß‡§Ç‡§§‡•ã‡§≤‡•Ä, ‡§®‡§æ‡§ó‡§™‡•Å‡§∞ / Dhantoli, Nagpur'
  }
];

// Sample time slots
const timeSlots: TimeSlot[] = [
  { id: 'slot_1030', time: '10:30 AM', available: true },
  { id: 'slot_1100', time: '11:00 AM', available: true },
  { id: 'slot_1130', time: '11:30 AM', available: true },
  { id: 'slot_1200', time: '12:00 PM', available: true },
  { id: 'slot_1430', time: '2:30 PM', available: true },
  { id: 'slot_1500', time: '3:00 PM', available: true }
];

// Multilingual messages
const messages = {
  hi: {
    greeting: '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! HealthBridge ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ üè•\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:',
    doctorSelection: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç:',
    slotSelection: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∏‡§Æ‡§Ø ‡§∏‡•ç‡§≤‡•â‡§ü‡•ç‡§∏:\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç:',
    confirmation: '‚úÖ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ!\n\nüìÖ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏:\nüë®‚Äç‚öïÔ∏è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞: {doctor}\nüïê ‡§∏‡§Æ‡§Ø: {time}\nüè• ‡§™‡§§‡§æ: {address}\n\nüì± QR ‡§ï‡•ã‡§° ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡§ï‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§Ö‡§™‡§®‡§æ ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å‡•§',
    qrMessage: 'üîó ‡§Ø‡§π ‡§Ü‡§™‡§ï‡§æ ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° QR ‡§ï‡•ã‡§° ‡§π‡•à‡•§ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§',
    error: '‡§ï‡•Å‡§õ ‡§ó‡§≤‡§§ ‡§π‡•Å‡§Ü‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§',
    invalidSelection: '‡§ó‡§≤‡§§ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡§ø‡§è ‡§ó‡§è ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç‡•§'
  },
  mr: {
    greeting: '‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! HealthBridge ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§Ü‡§π‡•á‡•§ üè•\n\n‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã‡•§\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡§ø‡§µ‡§°‡§æ:',
    doctorSelection: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡§ø‡§µ‡§°‡§æ:',
    slotSelection: '‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§µ‡•á‡§≥ ‡§∏‡•ç‡§≤‡•â‡§ü‡•ç‡§∏:\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•á‡§≥ ‡§®‡§ø‡§µ‡§°‡§æ:',
    confirmation: '‚úÖ ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ!\n\nüìÖ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§§‡§™‡§∂‡•Ä‡§≤:\nüë®‚Äç‚öïÔ∏è ‡§°‡•â‡§ï‡•ç‡§ü‡§∞: {doctor}\nüïê ‡§µ‡•á‡§≥: {time}\nüè• ‡§™‡§§‡•ç‡§§‡§æ: {address}\n\nüì± QR ‡§ï‡•ã‡§° ‡§∏‡•ç‡§ï‡•Ö‡§® ‡§ï‡§∞‡•Ç‡§® ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§®‡§æ ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§ú‡•Å‡§®‡§æ ‡§∞‡•á‡§ï‡•â‡§∞‡•ç‡§° ‡§¶‡§æ‡§ñ‡§µ‡§æ‡•§',
    qrMessage: 'üîó ‡§π‡§æ ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§∞‡•á‡§ï‡•â‡§∞‡•ç‡§° QR ‡§ï‡•ã‡§° ‡§Ü‡§π‡•á‡•§ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§®‡§æ ‡§¶‡§æ‡§ñ‡§µ‡§æ‡•§',
    error: '‡§ï‡§æ‡§π‡•Ä‡§§‡§∞‡•Ä ‡§ö‡•Ç‡§ï ‡§ù‡§æ‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ‡•§',
    invalidSelection: '‡§ö‡•Å‡§ï‡•Ä‡§ö‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Ç‡§Æ‡§ß‡•Ç‡§® ‡§®‡§ø‡§µ‡§°‡§æ‡•§'
  },
  en: {
    greeting: 'Hello! Welcome to HealthBridge. üè•\n\nI can help you book an appointment.\n\nPlease select a doctor:',
    doctorSelection: 'Please select a doctor:',
    slotSelection: 'Available time slots:\n\nPlease choose a time:',
    confirmation: '‚úÖ Booking Confirmed!\n\nüìÖ Appointment Details:\nüë®‚Äç‚öïÔ∏è Doctor: {doctor}\nüïê Time: {time}\nüè• Address: {address}\n\nüì± Scan QR code to show your medical records to the doctor.',
    qrMessage: 'üîó This is your medical record QR code. Show it to the doctor at the clinic.',
    error: 'Something went wrong. Please try again.',
    invalidSelection: 'Invalid selection. Please choose from the given options.'
  }
};

export class WhatsAppConversationHandler {
  
  // Detect language from message
  private detectLanguage(message: string): 'hi' | 'mr' | 'en' {
    const hindiKeywords = ['‡§®‡§Æ‡§∏‡•ç‡§§‡•á', '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü', '‡§°‡•â‡§ï‡•ç‡§ü‡§∞', '‡§∏‡§Æ‡§Ø'];
    const marathiKeywords = ['‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞', '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü', '‡§°‡•â‡§ï‡•ç‡§ü‡§∞', '‡§µ‡•á‡§≥'];
    
    const hasHindi = hindiKeywords.some(keyword => message.includes(keyword));
    const hasMarathi = marathiKeywords.some(keyword => message.includes(keyword));
    
    if (hasHindi) return 'hi';
    if (hasMarathi) return 'mr';
    return 'en';
  }

  // Get or create conversation state
  private getConversationState(phoneNumber: string): ConversationState {
    if (!conversationStates.has(phoneNumber)) {
      conversationStates.set(phoneNumber, {
        phoneNumber,
        step: 'greeting',
        language: 'hi' // Default to Hindi
      });
    }
    return conversationStates.get(phoneNumber)!;
  }

  // Update conversation state
  private updateConversationState(phoneNumber: string, updates: Partial<ConversationState>) {
    const state = this.getConversationState(phoneNumber);
    conversationStates.set(phoneNumber, { ...state, ...updates });
  }

  // Handle incoming message
  async handleMessage(phoneNumber: string, message: string): Promise<void> {
    const state = this.getConversationState(phoneNumber);
    
    // Detect language if it's the first message
    if (state.step === 'greeting') {
      const detectedLanguage = this.detectLanguage(message);
      this.updateConversationState(phoneNumber, { language: detectedLanguage });
      state.language = detectedLanguage;
    }

    const msgs = messages[state.language];

    try {
      switch (state.step) {
        case 'greeting':
          await this.handleGreeting(phoneNumber, message, state);
          break;
        case 'doctor_selection':
          await this.handleDoctorSelection(phoneNumber, message, state);
          break;
        case 'slot_selection':
          await this.handleSlotSelection(phoneNumber, message, state);
          break;
        case 'confirmation':
          await this.handleConfirmation(phoneNumber, message, state);
          break;
        default:
          await whatsappService.sendMessage(phoneNumber, msgs.error);
      }
    } catch (error) {
      console.error('Error handling WhatsApp message:', error);
      await whatsappService.sendMessage(phoneNumber, msgs.error);
    }
  }

  // Handle greeting and show doctor list
  private async handleGreeting(phoneNumber: string, message: string, state: ConversationState): Promise<void> {
    const msgs = messages[state.language];
    
    // Create doctor list sections
    const doctorRows = doctors.map((doctor, index) => ({
      id: doctor.id,
      title: `${index + 1}. ${doctor.name}`,
      description: doctor.specialty
    }));

    await whatsappService.sendListMessage(
      phoneNumber,
      msgs.greeting,
      '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ö‡•Å‡§®‡•á‡§Ç / Select Doctor',
      [{
        title: 'Available Doctors',
        rows: doctorRows
      }]
    );

    this.updateConversationState(phoneNumber, { step: 'doctor_selection' });
  }

  // Handle doctor selection
  private async handleDoctorSelection(phoneNumber: string, message: string, state: ConversationState): Promise<void> {
    const msgs = messages[state.language];
    
    // Handle both number selection (1, 2, 3) and doctor ID
    let selectedDoctor: Doctor | undefined;
    
    if (/^[1-3]$/.test(message.trim())) {
      const index = parseInt(message.trim()) - 1;
      selectedDoctor = doctors[index];
    } else {
      selectedDoctor = doctors.find(d => d.id === message.trim());
    }

    if (!selectedDoctor) {
      await whatsappService.sendMessage(phoneNumber, msgs.invalidSelection);
      return;
    }

    // Show available time slots
    const slotButtons = timeSlots
      .filter(slot => slot.available)
      .slice(0, 3) // Show first 3 available slots
      .map(slot => ({
        id: slot.id,
        title: slot.time
      }));

    await whatsappService.sendButtonMessage(
      phoneNumber,
      `${msgs.slotSelection}\n\nüë®‚Äç‚öïÔ∏è ${selectedDoctor.name}`,
      slotButtons
    );

    this.updateConversationState(phoneNumber, { 
      step: 'slot_selection',
      selectedDoctor: selectedDoctor.id
    });
  }

  // Handle time slot selection
  private async handleSlotSelection(phoneNumber: string, message: string, state: ConversationState): Promise<void> {
    const msgs = messages[state.language];
    
    const selectedSlot = timeSlots.find(slot => 
      slot.id === message.trim() || slot.time === message.trim()
    );

    if (!selectedSlot) {
      await whatsappService.sendMessage(phoneNumber, msgs.invalidSelection);
      return;
    }

    const doctor = doctors.find(d => d.id === state.selectedDoctor);
    if (!doctor) {
      await whatsappService.sendMessage(phoneNumber, msgs.error);
      return;
    }

    // Send confirmation message
    const confirmationMessage = msgs.confirmation
      .replace('{doctor}', doctor.name)
      .replace('{time}', selectedSlot.time)
      .replace('{address}', doctor.address);

    await whatsappService.sendMessage(phoneNumber, confirmationMessage);

    // Generate and send QR code
    const qrData = JSON.stringify({
      appointmentId: `apt_${Date.now()}`,
      patientPhone: phoneNumber,
      doctorId: doctor.id,
      slot: selectedSlot.time,
      date: new Date().toISOString().split('T')[0]
    });

    await whatsappService.sendQRCode(phoneNumber, qrData, msgs.qrMessage);

    this.updateConversationState(phoneNumber, { 
      step: 'completed',
      selectedSlot: selectedSlot.id
    });

    // Clear conversation state after 1 hour
    setTimeout(() => {
      conversationStates.delete(phoneNumber);
    }, 60 * 60 * 1000);
  }

  // Handle confirmation step
  private async handleConfirmation(phoneNumber: string, message: string, state: ConversationState): Promise<void> {
    const msgs = messages[state.language];
    await whatsappService.sendMessage(
      phoneNumber, 
      '‡§Ü‡§™‡§ï‡•Ä ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§π‡•à‡•§ ‡§®‡§à ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü" ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§'
    );
  }
}

export const conversationHandler = new WhatsAppConversationHandler();
